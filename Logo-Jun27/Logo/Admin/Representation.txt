- Source code
Alphabet: F T R [ ] + 0 1 2 3 4 5 6 7 8 9
Ignore: ' ' '\r' '\t' '\n'


- Tokens (A token is represented with <type, value>)
+ = <+, +>
F = <F, F>
T = <T, T>
R = <R, R>
[ = <[, [>
] = <], ]>
Number = <INT, digits>
Printing R, INT:3, [, F, INT:10, +, T, INT:45, ], Eof


- Ast (a tree is represented as a tree object)
BinaryTree = (headToken, leftSubTree, rightSubTree)
UnaryTree = (headToken, subTree)
Leaf = (headToken)
Printing: R(3, +(F10, T45))


Result
The result will be obtained by evaluating the whole tree recursivelly
BinaryTree.evaluate -> leftSubTree.evaluate (+) rightSubTree.evaluate
UnaryTree.evaluate -> (F | T | R) subTree.evaluate
Leaf.evaluate -> headToken.value
Printing: forward 10; turn 45; forward 10; turn 45; forward 10; turn 45;
