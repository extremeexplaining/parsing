- Source code
Alphabet: + * 0 1 2 3 4 5 6 7 8 9
Ignore: ' ' '\r' '\t' '\n'


- Tokens (A token is represented as an object having two properties <type, value>)
+ = <+, "+">
* = <*, "*">
Number = <INT, digits>
Printing: INT:11, +, *


- Ast (a tree is represented as a tree object)
BinaryTree = (headToken, leftSubTree, rightSubTree)
UniryTree = (headToken, subTree)
Leaf = (headToken)
Printing: +(2,*(11,4))


Result
The result will be obtained by evaluating the whole tree recursivelly
BinaryTree.evaluate -> leftSubTree.evaluate (+ | *) rightSubTree.evaluate
Leaf.evaluate -> headToken.value
Printing: 46
